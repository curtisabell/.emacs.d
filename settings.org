* Theme settings
  #+begin_src emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
  (if (display-graphic-p)
      (progn
        ;; If in a graphical display
        (load-theme 'abell-dark t))
    ;; If in terminal emacs, potentially choose different theme
    (load-theme 'abell-dark t)
    ;; James' fixes from cphys .emacs
    (define-key esc-map " " 'set-mark-command)
    (global-set-key (kbd "<M-delete>") 'kill-word)
    (normal-erase-is-backspace-mode 0)
    )
  #+end_src

* Emacs General Configuration
** Sensible defaults
   #+begin_src emacs-lisp
   (load-file "~/.emacs.d/Code/sensible-defaults.el")
   (sensible-defaults/use-all-settings)
   (sensible-defaults/use-all-keybindings)
   (sensible-defaults/backup-to-temp-directory)
 #+end_src

** GUI-specific
#+begin_src emacs-lisp
(when (display-graphic-p)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (global-linum-mode t)
  )
#+end_src

** Other Configurations
*** Enable UTF-8 (unicode) support.
#+begin_src emacs-lisp
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
#+end_src

*** Tab inserts spaces
#+begin_src emacs-lisp
(setq-default indent-tabs-mode 0)
#+end_src

*** Delete selection upon backspacing or typing.
#+begin_src emacs-lisp
(delete-selection-mode 0)
#+end_src

*** Don't show menu or scroll bar
#+begin_src emacs-lisp
(tool-bar-mode 0)
(menu-bar-mode 0)
(when window-system
  (scroll-bar-mode -1))
#+end_src

*** Disabled warning bell
#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src

*** Fix Emacs' mouse scrolling behaviour
#+begin_src emacs-lisp
(setq scroll-conservatively 100) ;; When cursor moves outside window, don't jump erratically
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
;; (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
#+end_src

*** Highlight the current line in GUI
#+begin_src emacs-lisp
;; (when window-system
;;   (global-hl-line-mode))
#+end_src

*** Enable disabled commands
#+begin_src emacs-lisp
(put 'narrow-to-region 'disabled nil)
#+end_src

*** Disable startup screen
#+begin_src emacs-lisp
(setq inhibit-startup-screen t)
#+end_src

*** Save custom configuration in custom.el
#+begin_src emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file :noerror)
#+end_src

*** CamelCase recognition
#+begin_src emacs-lisp
(global-subword-mode)
#+end_src

*** Set global tab width
#+begin_src emacs-lisp
(setq tab-width 5)
#+end_src

*** Display time in mode line
#+begin_src emacs-lisp :tangle no
(setq display-time-string-forms
        '((propertize (format-time-string " %b %d, %l:%M%P" now) 'face 'bold)))
(setq display-time-and-date t)
(display-time-mode 1)
#+end_src

 - Currently isn't compatible with spaceline, needs to be reworked.

*** Abbreviate all 'Yes/No' prompts to 'y/n'
#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

* Major modes
** Org
#+begin_src emacs-lisp
(require 'org)
(autoload 'org-mode "org" "Org Mode" t)
(defun my-org-mode-hook ()
    (setq org-log-done t)
    (define-key global-map "\C-cl" 'org-store-link)
    (define-key global-map "\C-ca" 'org-agenda)
    (visual-line-mode 1)
    (org-indent-mode 1)
    (abbrev-mode 1)
    (org-bullets-mode 1)
    (flyspell-mode 1)
    (setq org-src-fontify-natively t
          org-src-tab-acts-natively t
          org-confirm-babel-evahhluate nil
          org-edit-src-content-indentation 0)
    (setq org-hide-emphasis-markers t)
    (local-set-key (kbd "C-c m") 'TeX-inline-math-abell)
    )
(add-hook 'org-mode-hook 'my-org-mode-hook)
#+end_src

*** Change dashes to bullets in lists
#+begin_src emacs-lisp
(font-lock-add-keywords 'org-mode
                        '(("^ +\\([-*]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+end_src

*** Org-bullets mode
#+begin_src emacs-lisp
(use-package org-bullets
  :ensure t
  :init
  (org-bullets-mode 1)
  :config
  )
#+end_src

*** Org header customisation
#+begin_src emacs-lisp
(custom-theme-set-faces 'user
                        `(org-level-8 ((t (:font "DejaVu Sans" :weight bold :height 1.1 :foreground "slate grey"))))
                        `(org-level-7 ((t (:font "DejaVu Sans" :weight bold :height 1.1 :foreground "violet red"))))
                        `(org-level-6 ((t (:font "DejaVu Sans" :weight bold :height 1.1 :foreground "steel blue"))))
                        `(org-level-5 ((t (:font "DejaVu Sans" :weight bold :height 1.1 :foreground "Lime Green"))))
                        `(org-level-4 ((t (:font "DejaVu Sans" :weight bold :height 1.1 :foreground "OrangeRed"))))
                        `(org-level-3 ((t (:font "DejaVu Sans" :weight bold :height 1.2 :foreground "cyan"))))
                        `(org-level-2 ((t (:font "DejaVu Sans" :weight bold :height 1.35 :foreground "goldenrod"))))
                        `(org-level-1 ((t (:font "DejaVu Sans" :weight bold :height 1.5 :underline t :foreground "Forest Green"))))
                        `(org-document-title ((t (:font "DejaVu Sans" :weight bold :height 1.75)))))
#+end_src

** LSP
#+begin_src emacs-lisp
(use-package lsp-mode
  :ensure t
  :commands lsp
)
#+end_src

** Fortran 90
#+begin_src emacs-lisp
(defun my-f90-mode-hook ()
  (setq f90-font-lock-keywords f90-font-lock-keywords-3)
  '(f90-comment-region "!!!$")
  '(f90-indented-comment-re "!")
  (abbrev-mode 1)                       ; turn on abbreviation mode
  (turn-on-font-lock)                   ; syntax highlighting
  (auto-fill-mode 0)                    ; turn off auto-filling
  (lsp 1)                               ; enable lsp-mode
  (local-set-key (kbd "H-M-h") 'abell/f90-comment-header-block)
  )
(add-hook 'f90-mode-hook 'my-f90-mode-hook)
#+end_src

 - To install the Fortran LSP server, run
#+begin_src sh :tangle no :eval no
python3 -m pip install fortran-language-server
#+end_src

*** f90 comment block
#+begin_src emacs-lisp
(defun abell/f90-comment-header-block (title)
  "Inserts a commented title block for f90"
  (interactive "sEnter a title: ")
  (defvar blank-len 1)
  (setq blank-len (/ (- 69 (length title)) 2))
  (newline)
  (dotimes (jj 5)
    (case jj
      ((0 4)
       (indent-for-tab-command)
       (insert "!")
       (dotimes (ii 69) (insert "-"))
       (insert "!")
       (newline))
      ((1 3)
       (indent-for-tab-command)
       (insert "!")
       (dotimes (ii 69) (insert " "))
       (insert "!")
       (newline))
      (2
       (indent-for-tab-command)
       (insert "!")
       (dotimes (ii blank-len)
	 (insert " "))
       (if (= (mod (length title) 2) 0)
	   (insert " ")
	 )
       (insert title)
       (dotimes (ii blank-len)
	 (insert " "))
       (insert "!")
       (newline))
      ))
  )
#+end_src

** Python
#+begin_src emacs-lisp
(defun abell/python-mode-hook ()
  (setq electric-pair-mode t)
  (lsp 1)
  ;; (setq lsp-restart 'auto-restart)
  (setq lsp-restart 'ignore)
  )
(add-hook 'python-mode-hook 'abell/python-mode-hook)
#+end_src

 - To install the python LSP server, run
#+begin_src sh :tangle no :eval no
python -m pip install python-language-server[all]
#+end_src

** C++
#+begin_src emacs-lisp
(defun abell/cpp-mode-hook ()
  (setq electric-pair-mode t)
  (lsp 1)
  )
(add-hook 'c++-mode-hook 'abell/cpp-mode-hook)
#+end_src

 - To install the C++ LSP server, run
#+begin_src sh :tangle no :eval no
sudo apt install clangd-9
sudo update-alternatives --install /usr/bin/clangd clangd /usr/bin/clangd-9 100
#+end_src

** Julia
#+begin_src emacs-lisp
(use-package julia-mode
  :ensure t
  )
#+end_src

** Emacs-Lisp
#+begin_src emacs-lisp
  (define-key emacs-lisp-mode-map (kbd "C-c C-a") 'eval-buffer)
  (define-key emacs-lisp-mode-map (kbd "C-c C-r") 'eval-region)
#+end_src

** TeX
#+begin_src emacs-lisp
(defun my-LaTeX-mode-hook ()
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
  (setq TeX-PDF-mode t)
  (visual-line-mode 1)
  ;; (adaptive-wrap-prefix-mode 1)
  (flyspell-mode 1)
  (LaTeX-math-mode 1)
  (TeX-source-correlate-mode 1)
  (outline-minor-mode 1)
  (electric-pair-mode 1)
  ;; (rainbow-delimiters-mode 1)
  (local-set-key (kbd "C-c m") 'TeX-inline-math-abell)
  (local-set-key (kbd "C-c H-(") 'abell/TeX-round-brackets)
  (local-set-key (kbd "C-c H-[") 'abell/TeX-square-brackets)
  (local-set-key (kbd "C-c H-{") 'abell/TeX-curly-brackets)
  (local-set-key (kbd "C-M-=") '(lambda () (interactive) (insert "&= ")))
  (local-set-key (kbd "C-c b") 'tex-latex-block)
  (local-set-key (kbd "<C-tab>") 'outline-toggle-children)
  (local-set-key (kbd "<C-return>") 'TeX-align-newline-abell)
  (local-set-key (kbd "H-a") '(lambda () (interactive) (save-buffer) (TeX-command-run-all)))
  )
(add-hook 'LaTeX-mode-hook 'my-LaTeX-mode-hook)
#+end_src

*** LSP-LaTeX
To install the LSP server for TeX, we need =texlab=, the LSP server. This is built in Rust, and can be installed using Cargo, which comes with the =rustc= compiler.
#+begin_src sh :tangle no :eval no
sudo apt install rustc
cargo install --git https://github.com/latex-lsp/texlab.git
#+end_src

#+begin_src emacs-lisp
(use-package lsp-latex
  :ensure t
  :config
  (add-to-list 'load-path "~/.cargo/bin/texlab")

  (with-eval-after-load "tex-mode"
    (add-hook 'tex-mode-hook 'lsp)
    (add-hook 'latex-mode-hook 'lsp))

  (with-eval-after-load "bibtex"
    (add-hook 'bibtex-mode-hook 'lsp))
)
#+end_src

*** TeX functions
**** Insert inline-math
#+begin_src emacs-lisp
  (defun TeX-inline-math-abell()
    (interactive)
    (insert "\\(  \\)")
    (backward-char 3))
#+end_src

**** New line setup for align environments
#+begin_src emacs-lisp
  (defun TeX-align-newline-abell()
    (interactive)
    (insert "\\\\")
    (newline)
    (insert "&= ")
    (indent-for-tab-command))
#+end_src

**** Insert various parentheses
#+begin_src emacs-lisp
  (defun abell/TeX-round-brackets ()
    (interactive)
    (insert "\\left(  \\right)")
    (backward-char 8)
    )

  (defun abell/TeX-square-brackets ()
    (interactive)
    (insert "\\left[  \\right]")
    (backward-char 8)
    )

  (defun abell/TeX-curly-brackets ()
    (interactive)
    (insert "\\left\\{  \\right\\}")
    (backward-char 9)
    )
#+end_src

* Packages
** Helm
#+begin_src emacs-lisp
(use-package helm
  :ensure t
  :bind-keymap
  :init
  (helm-mode 1)
  :config
  (require 'helm-config)
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-x C-b") 'helm-buffers-list)
  (global-set-key (kbd "C-x b") 'helm-mini)
  ;; (setq helm-ff-skip-boring-files 0)
  )
#+end_src

*** helm-spotify-plus
#+begin_src emacs-lisp
  (use-package helm-spotify-plus
    :ensure helm
    :bind-keymap
    ("H-s H-n" . helm-spotify-plus-next)
    ("H-s H-p" . helm-spotify-plus-previous)
    ("H-s H-SPC" . helm-spotify-plus-toggle-play-pause)
    )
#+end_src

** Linum
#+begin_src emacs-lisp
(require 'linum)
(setq linum-disabled-modes-list '(eshell-mode wl-summary-mode
					      compilation-mode text-mode dired-mode pdf-view-mode
					      doc-view-mode shell-mode pdf-view-mode image-mode
					      term-mode)
)
#+end_src

** Projectile
#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  :config
  )
#+end_src

*** helm-projectile
#+begin_src emacs-lisp
(use-package helm-projectile
  :ensure t
  :init
  (helm-projectile-on)
  :config
  )
#+end_src

** Spaceline
#+begin_src emacs-lisp
(use-package spaceline
  :ensure t
  :config
  (setq-default mode-line-format '("%e" (:eval (spaceline-ml-main))))
)
#+end_src

#+begin_src emacs-lisp
(use-package spaceline-config
  :ensure spaceline
  :config
  (spaceline-helm-mode 1)
  (spaceline-install
   'main
   '((buffer-modified)
     ((remote-host buffer-id) :face highlight-face)
     (process :when active))
   '((selection-info :face 'region :when mark-active)
     ((flycheck-error flycheck-warning flycheck-info) :when active)
     (which-function)
     (version-control :when active)
     (line-column)
     (global :when active)
     (major-mode)))
  )
#+end_src

#+begin_src emacs-lisp
(setq-default
 powerline-height 24
 powerline-default-separator 'wave
 spaceline-flycheck-bullet "❖ %s"
 spaceline-separator-dir-left '(right . right)
 spaceline-separator-dir-right '(left . left)
 )
#+end_src

** Yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :init
  (yas-global-mode 1)
  :config
  (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
  (setq yas-indent-line 'fixed)
  (define-key yas-minor-mode-map (kbd "SPC") yas-maybe-expand)
  )
#+end_src

** Simpleclip
#+begin_src emacs-lisp
(use-package simpleclip
  :ensure t
  :init
  (simpleclip-mode 1)
  :config
  (global-set-key (kbd "H-x") 'simpleclip-cut)
  (global-set-key (kbd "H-c") 'simpleclip-copy)
  (global-set-key (kbd "H-v") 'simpleclip-paste)
  )
#+end_src

** PDF tools
#+begin_src emacs-lisp
(use-package pdf-tools
  :ensure t
  )
#+end_src

Make =pdf-tools-install= only run the first time a pdf is opened.
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.pdf\\'" . pdf-tools-install))
(add-hook 'pdf-view-mode-hook
          (lambda () (setq header-line-format nil)))
#+end_src

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.pdf\\'" . pdf-view-mode))
;; make midnight mode colours nice
(setq pdf-view-midnight-colors (cons (face-foreground 'default) (face-background 'default)))
(defun my-pdf-view-mode-hook ()
  (pdf-view-midnight-minor-mode 1)
  (linum-mode 0)
  )
(add-hook 'pdf-view-mode-hook 'my-pdf-view-mode-hook)
#+end_src

Configuration to use pdf-view-mode with latex.
#+begin_src emacs-lisp
(setq TeX-view-program-selection '((output-pdf "PDF Tools"))
      TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
      TeX-source-correlate-start-server t) ;; not sure if last line is neccessary

;; to have the buffer refresh after compilation
(add-hook 'TeX-after-compilation-finished-functions
          #'TeX-revert-document-buffer)
#+end_src

** Flyspell
#+begin_src emacs-lisp
(use-package flyspell
  :ensure t
)
#+end_src

Enable flyspell for all text-modes.
#+begin_src emacs-lisp
;; (add-hook 'text-mode-hook 'turn-on-flyspell)
#+end_src

Enable flyspell for comments and strings in programming languages.
#+begin_src emacs-lisp
;; (add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+end_src

** Company
#+begin_src emacs-lisp
(use-package company
  :ensure t
  :config
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 3)

  (global-company-mode t)
  )
#+end_src

*** Company-box
Adds icons to Company
#+begin_src emacs-lisp
(use-package company-box
  :ensure t
  :hook (company-mode . company-box-mode)
)
#+end_src

** Magit
#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :config
  )
#+end_src

** Dashboard
#+begin_src emacs-lisp
(defun abell/dashboard-banner ()
  "Display current version of Emacs below the banner"
  (setq dashboard-banner-logo-title
        (format "Emacs %s" emacs-version)))

(use-package dashboard
  :ensure t
  :init
  (add-hook 'after-init-hook 'dashboard-refresh-buffer)
  (add-hook 'dashboard-mode-hook 'abell/dashboard-banner)
  :config
  (setq dashboard-startup-banner 'logo)
  (dashboard-setup-startup-hook)
  (setq dashboard-items '((bookmarks  . 5)
                          (recents . 5)
					 (projects . 20)))
  )
#+end_src

* Misc Functions
** Yank to a newline
#+begin_src emacs-lisp
(defun abell/newline-yank ()
  (interactive)
  (newline)
  (yank)
  )
(global-set-key (kbd "<C-return>") 'abell/newline-yank)
#+end_src

** Display current buffer filename
#+begin_src emacs-lisp
(defun abell/view-buffer-name ()
  "Display the filename of the current buffer."
  (interactive)
  (message (buffer-file-name)))
(global-set-key (kbd "H-b") 'abell/view-buffer-name)
#+end_src

** Copy current buffer filename to kill ring
#+begin_src emacs-lisp
(global-set-key (kbd "C-H-b") (lambda () (interactive) (kill-new (buffer-file-name))))
#+end_src

** Swapping lines being commented above and below
#+begin_src emacs-lisp
(defun abell/comment-swap-above ()
  "Comments out the current line, and uncomments the line above"
  (interactive)
  (sensible-defaults/comment-or-uncomment-region-or-line)
  (previous-line)
  (sensible-defaults/comment-or-uncomment-region-or-line)
  )
(global-set-key (kbd "H-M-<up>") 'abell/comment-swap-above)

(defun abell/comment-swap-below ()
  "Comments out the current line, and uncomments the line below"
  (interactive)
  (sensible-defaults/comment-or-uncomment-region-or-line)
  (next-line)
  (sensible-defaults/comment-or-uncomment-region-or-line)
  )
(global-set-key (kbd "H-M-<down>") 'abell/comment-swap-below)
#+end_src

** Insert a comment header in each language
#+begin_src emacs-lisp
(defun abell/general-comment-header (title)
  "Inserts a commented title"
  (interactive "sEnter a title: ")
  (defvar dash-len 1)
  (setq dash-len (/ (- 66 (length title)) 2))
  (dotimes (ii dash-len)
    (insert "-"))
  (if (= (mod (length title) 2) 1)
      (insert "-")
    )
  (insert title)
  (dotimes (ii dash-len)
    (insert "-"))
  (sensible-defaults/comment-or-uncomment-region-or-line)
  (indent-for-tab-command)
  )
(global-set-key (kbd "H-h") 'abell/general-comment-header)
#+end_src

** Change between vertical and horizontal windows splitting
#+begin_src emacs-lisp
(defun my/window-split-toggle ()
  "Toggle between horizontal and vertical split with two windows."
  (interactive)
  (if (> (length (window-list)) 2)
      (error "Can't toggle with more than 2 windows!")
    (let ((func (if (window-full-height-p)
                    #'split-window-vertically
                  #'split-window-horizontally)))
      (delete-other-windows)
      (funcall func)
      (save-selected-window
        (other-window 1)
        (switch-to-buffer (other-buffer)))))
    )
  (global-set-key (kbd "H-f") 'my/window-split-toggle)
#+end_src

** Quick access to this file
#+begin_src emacs-lisp
(defun abell/visit-emacs-config ()
  (interactive)
  (find-file "~/.emacs.d/settings.org"))
(global-set-key (kbd "C-c e") 'abell/visit-emacs-config)

(defun abell/visit-emacs-config-other-window ()
  (interactive)
  (find-file-other-window "~/.emacs.d/settings.org"))
(global-set-key (kbd "C-c M-e") 'abell/visit-emacs-config-other-window)
#+end_src

** Quick access to bashrc
#+begin_src emacs-lisp
(defun abell/visit-bashrc ()
  (interactive)
  (if (file-exists-p "~/.bash_config")
      (find-file "~/.bash_config")
    (find-file "~/.bashrc")
    )
  )
(global-set-key (kbd "C-c b") 'abell/visit-bashrc)
#+end_src

** Move lines up and down
#+begin_src emacs-lisp
(defun abell/move-line-up ()
  (interactive)
  (transpose-lines 1)
  (previous-line 2))
(global-set-key (kbd "M-<up>") 'abell/move-line-up)

(defun abell/move-line-down ()
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (previous-line 1))
(global-set-key (kbd "M-<down>") 'abell/move-line-down)
#+end_src

** Duplicate current line
#+begin_src emacs-lisp
(defun duplicate-current-line-or-region (arg)
  "Duplicates the current line or region ARG times."
  (interactive "p")
  (let (beg end (origin (point)))
    (if (and mark-active (> (point) (mark)))
        (exchange-point-and-mark))
    (setq beg (line-beginning-position))
    (if mark-active
        (exchange-point-and-mark))
    (setq end (line-end-position))
    (let ((region (buffer-substring-no-properties beg end)))
      (dotimes (i arg)
        (goto-char end)
        (newline)
        (insert region)
        (setq end (point)))
      (goto-char (+ origin (* (length region) arg) arg)))))
(global-set-key (kbd "H-d") 'duplicate-current-line-or-region)
#+end_src

** Kill buffer and frame
#+begin_src emacs-lisp
(defun abell/kill-buffer-and-frame ()
  (interactive)
  (kill-this-buffer)
  (delete-frame))
(global-set-key (kbd "C-x 5 k") 'abell/kill-buffer-and-frame)
#+end_src

** Run python3 in this buffer
#+begin_src emacs-lisp
(defun abell/run-python3 ()
  (interactive)
  (let ((buf (ansi-term "/usr/bin/python3")))))
#+end_src

** Open/close terminal in other window
#+begin_src emacs-lisp
(defun abell/open-term-other-window ()
  (interactive)
  (let ((buf (ansi-term "/bin/bash")))
    (switch-to-buffer (other-buffer buf))
    (switch-to-buffer-other-window buf))
  )
(global-set-key (kbd "C-x 4 t") 'abell/open-term-other-window)
(defun abell/open-term-other-window-below ()
      (interactive)
      (split-window-below -9)
      (other-window ansi-term)
      (1 "/bin/bash")
      )
(defun abell/open-term-close-window ()
  (interactive)
  (switch-to-buffer-other-window "*terminal*")
  (kill-buffer-and-window)
  )
(add-hook 'term-exec-hook
          (lambda () (set-process-query-on-exit-flag (get-buffer-process (current-buffer)) nil)))
(global-set-key (kbd "H-t") 'abell/open-term-other-window)
(global-set-key (kbd "H-M-t") 'abell/open-term-close-window)
#+end_src

** Increment/decrement numbers
#+begin_src emacs-lisp
(defun my-increment-number-decimal (&optional arg)
  "Increment the number forward from point by 'arg'."
  (interactive "p*")
  (save-excursion
    (save-match-data
      (let (inc-by field-width answer)
        (setq inc-by (if arg arg 1))
        (skip-chars-backward "0123456789")
        (when (re-search-forward "[0-9]+" nil t)
          (setq field-width (- (match-end 0) (match-beginning 0)))
          (setq answer (+ (string-to-number (match-string 0) 10) inc-by))
          (when (< answer 0)
            (setq answer (+ (expt 10 field-width) answer)))
          (replace-match (format (concat "%0" (int-to-string field-width) "d")
                                 answer)))))))

(defun my-decrement-number-decimal (&optional arg)
  (interactive "p*")
  (my-increment-number-decimal (if arg (- arg) -1)))

(global-set-key (kbd "C-c i") 'my-increment-number-decimal)
(global-set-key (kbd "C-c d") 'my-decrement-number-decimal)
#+end_src

* Misc keybindings
#+begin_src emacs-lisp
(global-set-key (kbd "M-n") 'forward-paragraph)
(global-set-key (kbd "M-p") 'backward-paragraph)
(global-set-key (kbd "M-]") 'other-frame)
(global-set-key (kbd "M-[") 'other-window)
(global-set-key (kbd "C-x 4 k") 'kill-buffer-and-window)
(global-set-key (kbd "<menu>") 'shell-command)
#+end_src

** Code marking
#+begin_src emacs-lisp
(global-set-key (kbd "C-c n") (lambda () (interactive) (insert-char 10008))) ; ✘
(global-set-key (kbd "H-y") (lambda () (interactive) (insert-char 10004))) ; ✔
(global-set-key (kbd "C-H-y") (lambda () (interactive) (count-matches "✔" 0 nil t))) ; Count ✔
#+end_src
